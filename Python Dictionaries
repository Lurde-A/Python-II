                      INTRODUCTION TO PYTHON DICTIONARIES

1. Suppose we have a dictionary of temperature sensors in the house and what temperatures they read. We’ve just added a sensor to the "pantry", and it reads 22 degrees. Add this 
pair to the dictionary on line 1.
//
sensors =  {"living room": 21, "kitchen": 23, "bedroom": 20, "pantry": 22}
print(sensors)
  2. Remove the # in front of the definition of the dictionary num_cameras, which represents the number of cameras in each area around the house. If you run this code, you’ll get an error:
"SyntaxError: invalid syntax" Try to find and fix the syntax error to make this code run. 
Given code: #num_cameras = {"backyard": 6  "garage": 2  "driveway": 1}
//
num_cameras = {"backyard": 6, "garage": 2, "driveway": 1}

                      MAKE A DICTIONARY

  3. Create a dictionary called translations that maps the following words in English to their definitions in Sindarin (the language of the elves):
          English	        Sindarin
          mountain	      orod
          bread	          bass
          friend	        mellon
          horse	          roch
 //
translations = {"mountain": "orod", "bread": "bass", "friend": "mellon", "horse": "roch"}

                      INVALID KEYS

  4 . Run the code inside script.py. You should get an error: 
        TypeError: unhashable type
        Make the code run without errors by flipping the items in the dictionary so that the strings are the keys and the lists are the values
The code: "children = {["Johannes", "Rosmarie", "Eleonore"]: "von Trapp", ["Sonny", "Fredo", "Michael"]: "Corleone"}"
//
Fixed code:
children = {"von Trapp": ["Johannes", "Rosmarie", "Eleonore"], "Corleone": ["Sonny", "Fredo", "Michael"]}

                      EMPTY DICTIONARY

  5. Create an empty dictionary called my_empty_dictionary.
//
my_empty_dictionary = {}

                      ADD A KEY

  6. Create an empty dictionary called animals_in_zoo.
//
animals_in_zoo = {}

  7. Walking around the zoo, you see 8 zebras. Add "zebras" to animals_in_zoo as a key with a value of 8.
//
animals_in_zoo = {}
animals_in_zoo["zebras"] = 8

  8. The primate house was bananas! Add "monkeys" to animals_in_zoo as a key with a value of 12.
//
animals_in_zoo = {}
animals_in_zoo["zebras"] = 8
animals_in_zoo["monkeys"] = 12

  9. As you leave the zoo, you are saddened that you did not see any dinosaurs. Add "dinosaurs" to animals_in_zoo as a key with a value of 0.
//
animals_in_zoo = {}
animals_in_zoo["zebras"] = 8
animals_in_zoo["monkeys"] = 12
animals_in_zoo["dinosaurs"] = 0

  10. Print animals_in_zoo.
//
animals_in_zoo = {}
animals_in_zoo["zebras"] = 8
animals_in_zoo["monkeys"] = 12
animals_in_zoo["dinosaurs"] = 0
print(animals_in_zoo)

                      ADD MULTIPLE KEYS

  11. In one line of code, add two new users to the user_ids dictionary:
        theLooper, with an id of 138475
        stringQueen, with an id of 85739
      Print user_ids
//
user_ids = {"teraCoder": 9018293, "proProgrammer": 119238}
user_ids.update({"theLooper": 138475, "stringQueen": 85739})
print(user_ids)

                      OVERWRITE VALUES

  12. Add the key "Supporting Actress" and set the value to "Viola Davis".
        oscar_winners = {"Best Picture": "La La Land", "Best Actor": "Casey Affleck", "Best Actress": "Emma Stone", "Animated Feature": "Zootopia"}
//
oscar_winners["Supporting Actress"] = "Viola Davis"

  13. Without changing the definition of the dictionary oscar_winners, change the value associated with the key "Best Picture" to "Moonlight".
//
oscar_winners["Best Picture"] = "Moonlight"
print(oscar_winners)

                      DICT COMPREHENSIONS

  14. You have two lists, representing some drinks sold at a coffee shop and the milligrams of caffeine in each. First, create a variable called zipped_drinks that is an iterator 
of pairs between the drinks list and the caffeine list.
//
zipped_drinks = zip(drinks, caffeine)

  15. Create a dictionary called drinks_to_caffeine by using a dict comprehension that goes through the zipped_drinks iterator and turns each tuple pair into a key:value item.
//
drinks_to_caffeine = {key:value for key, value in zipped_drinks}

                      REVIEW
