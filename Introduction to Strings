                                INTRODUTCION TO STRINGS
  1.1 Save your favorite word as a string to the variable favorite_word.
//
favorite_word = "Potatoe"

  1.2 Print favorite_word.
//
favorite_word = "Potatoe"
print(favorite_word)

                                THEY'RE ALL LISTS!
  2.1 One of the most common things that are represented by strings is names. Save your name as a string to the variable my_name.
//
my_name = "Lurde"
  2.2 Select the first letter of the variable my_name and save it to first_initial.
//
my_name = "Lurde"
first_initial = my_name[0]

                                CUT ME A SLICE OF STRING
  3.1 A new employee, Rodrigo Villanueva, is starting today and you need to create his account. His first_name and last_name are stored as strings in script.py. Create a variable 
new_account by slicing the first five letters of his last_name. 
      first_name = "Rodrigo"
      last_name = "Villanueva"
//
new_account = last_name[:5]
print(new_account)
  3.2 Create a variable called temp_password by creating a slice out of the third through sixth letters of last_name. Your string should have a total of 4 characters.
//
temp_password = last_name[2:6]
print(temp_password)

                                CONCATENATING STRINGS
  4.1 Write a function called account_generator() that takes two inputs, first_name and last_name and concatenates the first three letters of each and then returns the new account name.
      first_name = "Julie"
      last_name = "Blevins"
//
first_name = "Julie"
last_name = "Blevins"
def account_generator(first_name, last_name):
  new_account_name = first_name[:3] + last_name[:3]
  return new_account_name
  4.2 Test your function on the first_name and last_name provided in script.py and save it to the variable new_account.
//
new_account = account_generator(first_name,last_name)
print(new_account)

                                MORE AND MORE STRING SLICING
  5.1 Copeland’s Corporate Company also wants to update how they generate temporary passwords for new employees. Write a function called password_generator() that takes two inputs, 
first_name and last_name, and then concatenates the last three letters of each and returns them as a string.
//
first_name = "Reiko"
last_name = "Matsuki"
def password_generator(first_name, last_name):
  pas = first_name[len(first_name)-3:] + last_name[len(last_name)-3:]
  return pas
  5.2 Test your function on the provided first_name and last_name and save it to the variable temp_password
//
temp_password = password_generator(first_name, last_name)
print(temp_password)

                                NEGATIVE INDICES
  6.1 Use negative indices to find the second to last character in company_motto. Save this to the variable second_to_last.
company_motto = "Copeland's Corporate Company helps you capably cope with the constant cacophony of daily life"
//
second_to_last = company_motto[-2]
  6.2 Use negative indices to create a slice of the last 4 characters in company_motto. Save this to the variable final_word.
//
final_word = company_motto[-4:]

                                STRINGS ARE IMMUTABLE
  7.1 The most recent hire at Copeland’s Corporate Company is a fellow named Rob Daily. Unfortunately, Human Resources seem to have made a bit of a typo and sent over the wrong 
first_name. Try changing the first character of first_name by running
//
first_name[0] = "R"
  7.2 Oh right! Strings are immutable, so we can’t change an individual character. Okay that’s no problem—we can still fix this! Delete the code you just wrote for step 1.
Then, concatenate the string "R" with a slice of first_name that includes everything but the first character, "B", and save it to a new string fixed_first_name.
//
fixed_first_name = "R"+first_name[-2:]
print(fixed_first_name)

                                ESCAPE CHARACTERS
  8.1 When Rob Daily (remember him? From the last exercise?) set up his account he set his password to be
    - theycallme"crazy"91
      His password was causing some errors in the system because of the " marks. Rewrite his password using escape characters and save it to the variable password.
//
password = "theycallme\"crazy\"91"

                                ITERATING THROUGH STRINGS
  9.1 Let’s replicate a function you are already familiar with, len(). Write a new function called get_length() that takes a string as an input and returns the number of 
characters in that string. Do this by iterating through the string. Do not use the len() function!
//
def get_length(word):
  letters = 0
  for i in word: 
    letters += 1
  return letters
print(get_length("avocado"))

                                STRINGS AND CONDITIONALS (PART ONE)
  10.1 Write a function called letter_check that takes two inputs, word and letter. This function should return True if the word contains the letter and False if it does not.
//
def letter_check(word, letter):
  isFound = False
  Number = 0
  for i in word:
    if i == letter:
      isFound = not isFound
      Number += 1
  return isFound, Number
print(letter_check("strawberry", "r"))            PRINTS ANSWER: (True, 3)

                                STRINGS AND CONDITIONALS (PART TWO)
  11.1 Write a function called contains that takes two arguments, big_string and little_string and returns True if big_string contains little_string. For example 
contains ("watermelon", "melon") should return True and contains("watermelon", "berry") should return False.
//
def contains(big_string, little_string):
  return little_string in big_string
print(contains("watermelon", "melon"))
  11.2 Write a function called common_letters that takes two arguments, string_one and string_two and then returns a list with all of the letters they have in common.
The letters in the returned list should be unique. For example,
      common_letters("banana", "cream")
      should return ['a']
//
def common_letters(string_one, string_two):
  common = []
  for letter in string_one:
    if (letter in string_two) and not (letter in common):
      common.append(letter)
  return common

print(common_letters("banana", "creaman-b"))            PRINTS ANSWER: ['b', 'a', 'n']

                                REVIEW
  12.1 Copeland’s Corporate Company has finalized what they want their username and temporary password creation to be and have enlisted your help, once again, to build the function 
to generate them. In this exercise, you will create two functions, username_generator and password_generator. Let’s start with username_generator. Create a function called 
username_generator take two inputs, first_name and last_name and returns a user_name. The username should be a slice of the first three letters of their first name and the 
first four letters of their last name. If their first name is less than three letters or their last name is less than four letters it should use their entire names. For example, 
if the employee’s name is Abe Simpson the function should generate the username AbeSimp
//
def username_generator(first_name, last_name):
  user_name = first_name[:3] + last_name[:4]
  if len(first_name) < 3 or len(last_name) < 4:
    user_name = first_name + last_name
  return user_name
print(username_generator("Abe","Simpson"))

  12.2 Great work! Now for the temporary password, they want the function to take the input user name and shift all of the letters by one to the right, so the last letter of the 
username ends up as the first letter and so forth. For example, if the username is AbeSimp, then the temporary password generated should be pAbeSim. Start by defining a function 
called password_generator that takes one parameter user_name and defines an empty string named password within the function body.
//
def password_generator(user_name):
  password = ""

  12.3 Inside password_generator, create a for loop that iterates through the indices of user_name by going from 0 to len(user_name). The loop should create the password by 
shifting all the letters of user_name one to the right. To do so, add the letter at the previous index of user_name to password with each pass of the loop. After the for loop but 
still within the definition of password_generator, return the password.
//
def password_generator(user_name):
  password = ""
  for i in range(0,len(user_name)):
    password += user_name[i-1]
    i+=1
  return password
print(password_generator("strawberry"))



